<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Product;
use App\Models\Manufacturer;
use App\Models\DosageForm;
use App\Models\TherapeuticCategory;
use Illuminate\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Log; // Useful for debugging, can be removed in production

class ProductController extends Controller
{
    /**
     * Display a listing of the products.
     */
    public function index(Request $request): View | JsonResponse
    {
        // Eager load all necessary relationships, including 'images'
        $query = Product::with(['manufacturer', 'dosageForm', 'therapeuticCategory', 'images'])
                        ->where('is_active', true);

        // Apply Filters based on request parameters (these will come from JS AJAX calls)
        if ($request->filled('search')) {
            $search = strtolower($request->get('search'));
            $query->where(function ($q) use ($search) {
                $q->whereRaw('LOWER(name) LIKE ?', ["%{$search}%"])
                  ->orWhereRaw('LOWER(description) LIKE ?', ["%{$search}%"])
                  ->orWhereHas('manufacturer', function ($q_man) use ($search) {
                      $q_man->whereRaw('LOWER(name) LIKE ?', ["%{$search}%"]);
                  })
                  ->orWhereHas('dosageForm', function ($q_df) use ($search) {
                      $q_df->whereRaw('LOWER(name) LIKE ?', ["%{$search}%"]);
                  })
                  ->orWhereHas('therapeuticCategory', function ($q_tc) use ($search) {
                      $q_tc->whereRaw('LOWER(name) LIKE ?', ["%{$search}%"]);
                  });
            });
        }

        if ($request->filled('manufacturer')) {
            $query->whereHas('manufacturer', function ($q) use ($request) {
                $q->where('name', $request->get('manufacturer'));
            });
        }

        if ($request->filled('dosageForm')) {
            $query->whereHas('dosageForm', function ($q) use ($request) {
                $q->where('name', $request->get('dosageForm'));
            });
        }

        if ($request->filled('therapeuticCategory')) {
            $query->whereHas('therapeuticCategory', function ($q) use ($request) {
                $q->where('name', $request->get('therapeuticCategory'));
            });
        }

        if ($request->filled('availability')) {
            $query->where('availability_status', $request->get('availability'));
        }

        // Paginate the results
        $products = $query->orderBy('order')->paginate(12);

        $locale = app()->getLocale();

        // Prepare localized product data for the initial page load (passed to Blade and then JS)
        $localizedProducts = collect($products->items())->map(function ($product) use ($locale) {
            // Get the first image path from the relationship, or null if no images
            $imagePath = $product->images->isNotEmpty() ? $product->images->first()->path : null;

            // Optional: Uncomment for temporary debugging to check paths being generated by PHP
            // Log::info('Processing product: ' . $product->name . ' Image path for JS: ' . ($imagePath ?? 'N/A'));

            return [
                'id' => $product->id,
                'name' => ($locale === 'es' && $product->name_es) ? $product->name_es : $product->name,
                'description' => ($locale === 'es' && $product->description_es) ? $product->description_es : $product->description,
                'availability_status' => $product->availability_status,
                'slug' => $product->slug,
                'product_image_path_raw' => $imagePath, // Correctly populated from relationship
                'manufacturer' => $product->manufacturer
                    ? (($locale === 'es' && $product->manufacturer->name_es) ? $product->manufacturer->name_es : $product->manufacturer->name)
                    : '',
                'dosageForm' => $product->dosageForm
                    ? (($locale === 'es' && $product->dosageForm->name_es) ? $product->dosageForm->name_es : $product->dosageForm->name)
                    : '',
                'therapeuticCategory' => $product->therapeuticCategory
                    ? (($locale === 'es' && $product->therapeuticCategory->name_es) ? $product->therapeuticCategory->name_es : $product->therapeuticCategory->name)
                    : '',
            ];
        })->values();

        // Handle AJAX requests for product filtering/infinite scroll
        if ($request->ajax()) {
            // For AJAX requests, we return the raw product models.
            // We need to attach the 'product_image_path' directly to the product object
            // as the JavaScript expects this property for dynamic rendering.
            $ajaxProducts = collect($products->items())->map(function($product) {
                $product->product_image_path = $product->images->isNotEmpty() ? $product->images->first()->path : null;
                return $product;
            });

            return response()->json([
                'products' => $ajaxProducts, // Send products with 'product_image_path' attached
                'next_page_url' => $products->nextPageUrl(),
                'has_more_pages' => $products->hasMorePages()
            ]);
        }

        // For the initial page load, return the Blade view
        return view('products.index', [
            'products' => $products, // Pass the Paginator object for pagination links (e.g., $products->nextPageUrl())
            'localizedProducts' => $localizedProducts, // Pass the prepared, localized data for JS initial render
            'manufacturers' => Manufacturer::where('is_active', true)->orderBy('name')->get(),
            'dosageForms' => DosageForm::where('is_active', true)->orderBy('name')->get(),
            'therapeuticCategories' => TherapeuticCategory::where('is_active', true)->orderBy('name')->get(),
        ]);
    }

    /**
     * Display the specified product.
     */
    public function show(string $slug): View
    {
        // Eager load all necessary relationships for the detail page
        $product = Product::with(['manufacturer', 'dosageForm', 'therapeuticCategory', 'images'])
                            ->where('slug', $slug)
                            ->where('is_active', true)
                            ->firstOrFail();

        // Fetch related products (e.g., from the same therapeutic category)
        $relatedProducts = Product::where('therapeutic_category_id', $product->therapeutic_category_id)
                                    ->where('id', '!=', $product->id)
                                    ->where('is_active', true)
                                    ->with('images') // Eager load images for related products too
                                    ->orderBy('name')
                                    ->take(4)
                                    ->get();

        // Prepare breadcrumb data for navigation
        $breadcrumbs = [
            [
                'name' => __('messages.home'), // Assuming you have a 'home' translation key
                'url' => route('home') // Assuming a route named 'home'
            ],
            [
                'name' => __('messages.our_product_catalog_page_title'), // Products page title
                'url' => route('products.index') // Route to the product listing page
            ],
        ];

        // Add therapeutic category to breadcrumbs if it exists
        if ($product->therapeuticCategory) {
            $categoryName = $product->therapeuticCategory->{'name_' . app()->getLocale()} ?? $product->therapeuticCategory->name;
            $breadcrumbs[] = [
                'name' => $categoryName,
                // Link to the products index page, filtered by this category's English name
                'url' => route('products.index', ['therapeuticCategory' => $product->therapeuticCategory->name])
            ];
        }

            // --- NEW: Add Manufacturer to breadcrumbs if it exists ---
        if ($product->manufacturer) {
            $manufacturerName = $product->manufacturer->{'name_' . app()->getLocale()} ?? $product->manufacturer->name;
            $breadcrumbs[] = [
                'name' => $manufacturerName,
                'url' => route('products.index', ['manufacturer' => $product->manufacturer->name]) // Link to filtered products by manufacturer
            ];
        }
        // --- END NEW ---

        // Add the current product to breadcrumbs (usually not a clickable link)
        $breadcrumbs[] = [
            'name' => $product->{'name_' . app()->getLocale()} ?? $product->name,
            'url' => route('products.show', $product->slug)
        ];

        return view('products.show', [
            'product' => $product,
            'relatedProducts' => $relatedProducts,
            'breadcrumbs' => $breadcrumbs, // Pass the breadcrumbs array to the view
        ]);
    }
}